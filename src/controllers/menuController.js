import Menu from "../models/Menu.js";

// üîß –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–∞—Ç–∏ –¥–æ UTC 00:00
const normalizeDateToUTC = (inputDate) => {
  const date = new Date(inputDate);
  date.setUTCHours(0, 0, 0, 0);
  return date;
};

// –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞–≤–∏ –≤ –º–µ–Ω—é (—Ç—ñ–ª—å–∫–∏ –∫—É—Ä–∞—Ç–æ—Ä–∏)
export const createFreeSaleDish = async (req, res) => {
  try {
    const { date, dishName, price, isFreeSale } = req.body;

    const newDish = new Menu({
      date: normalizeDateToUTC(date),
      dishName,
      price,
      isFreeSale,
    });

    await newDish.save();

    res.status(201).json({ message: "–°—Ç—Ä–∞–≤–∞ –¥–æ–¥–∞–Ω–∞ –¥–æ –º–µ–Ω—é!", item: newDish });
  } catch (error) {
    res
      .status(500)
      .json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Å—Ç—Ä–∞–≤–∏!", error: error.message });
  }
};

export const createDish = async (req, res) => {
  try {
    const dishes = req.body;
    const newDishes = [];

    for (let i = 0; i < dishes.length; i++) {
      const { date, dishName, price } = dishes[i];
      const newDish = new Menu({
        date: normalizeDateToUTC(date),
        dishName,
        price,
      });
      await newDish.save();
      newDishes.push(newDish);
    }

    res
      .status(201)
      .json({ message: "–°—Ç—Ä–∞–≤–∏ –¥–æ–¥–∞–Ω–æ –¥–æ –º–µ–Ω—é!", items: newDishes });
  } catch (error) {
    res
      .status(500)
      .json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Å—Ç—Ä–∞–≤", error: error.message });
  }
};

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—å–æ–≥–æ –º–µ–Ω—é
export const getMenu = async (req, res) => {
  try {
    const menu = await Menu.find();
    res.json(menu);
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–Ω—é –¥–ª—è —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ–≥–æ –¥–Ω—è (–ø–æ UTC)
export const getMenuForToday = async (req, res) => {
  try {
    const now = new Date();
    const startOfDayUTC = new Date(Date.UTC(now.getFullYear(), now.getMonth(), now.getDate()));
    const endOfDayUTC = new Date(Date.UTC(now.getFullYear(), now.getMonth(), now.getDate() + 1));

    const todayMenu = await Menu.find({
      date: { $gte: startOfDayUTC, $lt: endOfDayUTC },
    });

    res.status(200).json(todayMenu);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!" });
  }
};

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä–∞–≤–∏ (—Ç—ñ–ª—å–∫–∏ –∫—É—Ä–∞—Ç–æ—Ä–∏)
export const updateDish = async (req, res) => {
  try {
    const { id } = req.params;
    const updates = req.body;
    const userRole = req.user.role;

    const dishToUpdate = await Menu.findById(id);
    if (!dishToUpdate) {
      return res.status(404).json({ message: "–°—Ç—Ä–∞–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    if (userRole !== "curator") {
      return res.status(403).json({
        message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—ñ—î—ó —Å—Ç—Ä–∞–≤–∏",
      });
    }

    // –Ø–∫—â–æ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –¥–∞—Ç–∞ ‚Äî –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ
    if (updates.date) {
      updates.date = normalizeDateToUTC(updates.date);
    }

    Object.assign(dishToUpdate, updates);
    await dishToUpdate.save();

    res.json({ message: "–°—Ç—Ä–∞–≤—É –æ–Ω–æ–≤–ª–µ–Ω–æ", item: dishToUpdate });
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç—Ä–∞–≤–∏ (—Ç—ñ–ª—å–∫–∏ –∫—É—Ä–∞—Ç–æ—Ä–∏)
export const deleteDish = async (req, res) => {
  try {
    const { id } = req.params;
    await Menu.findByIdAndDelete(id);
    res.json({ message: "–°—Ç—Ä–∞–≤—É –≤–∏–¥–∞–ª–µ–Ω–æ" });
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};
