import Order from "../models/Order.js";
import User from "../models/User.js";
import Menu from "../models/Menu.js";

export const createOrder = async (req, res) => {
  try {
    const { items } = req.body;
    const studentId = req.user.id;

    // –û—Ç—Ä–∏–º—É—î–º–æ ID —Å—Ç—Ä–∞–≤ —Ç–∞ —ó—Ö –∫—ñ–ª—å–∫—ñ—Å—Ç—å
    const itemIds = items.map((item) => item.dishId);
    const menuItems = await Menu.find({ _id: { $in: itemIds } });

    if (menuItems.length !== items.length) {
      return res.status(400).json({ message: "–î–µ—è–∫—ñ —Å—Ç—Ä–∞–≤–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    // –§–æ—Ä–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å
    let total = 0;
    const orderItems = items
      .map((item) => {
        const dish = menuItems.find((d) => d._id.toString() === item.dishId);
        if (!dish) return null;

        const quantity = item.quantity || 1;
        total += dish.price * quantity;

        return {
          dishId: dish._id,
          dishName: dish.dishName,
          price: dish.price,
          quantity,
          isFreeSale: dish.isFreeSale,
        };
      })
      .filter(Boolean);

    // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const student = await User.findById(studentId);
    if (!student)
      return res.status(404).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É
    if (student.balance - total < -200) {
      return res.status(400).json({ message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤" });
    }

    // –í—ñ–¥–Ω—ñ–º–∞—î–º–æ –∫–æ—à—Ç–∏
    student.balance -= total;
    await student.save();

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    const order = new Order({
      studentId,
      items: orderItems,
      total,
    });

    await order.save();
    res.status(201).json(order);
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

export const deleteOrder = async (req, res) => {
  try {
    const orderId = req.params.id;
    console.log("Order ID from params: ", orderId);

    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({ message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ deleteOne() –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    await order.deleteOne(); // –∞–±–æ await Order.findByIdAndDelete(orderId);

    // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const student = await User.findById(order.studentId);
    student.balance += order.total;
    await student.save();

    res.status(200).json({ message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ" });
  } catch (error) {
    console.error(error);
    res
      .status(500)
      .json({ message: "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
  }
};

export const updateOrder = async (req, res) => {
  try {
    const orderId = req.params.id;
    const { items } = req.body;
    const studentId = req.user.id;

    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({ message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    if (order.studentId.toString() !== studentId) {
      return res
        .status(403)
        .json({ message: "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
    }

    // üßπ –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ —Ç—ñ —Å—Ç—Ä–∞–≤–∏, —É —è–∫–∏—Ö –∫—ñ–ª—å–∫—ñ—Å—Ç—å > 0
    const filteredItems = items.filter((item) => item.quantity > 0);

    // –Ø–∫—â–æ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –Ω—ñ—á–æ–≥–æ –Ω–µ –ª–∏—à–∏–ª–æ—Å—å ‚Äî –≤—ñ–¥–º–æ–≤–ª—è—î–º–æ—Å—å –≤—ñ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    if (filteredItems.length === 0) {
      return res
        .status(400)
        .json({ message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º" });
    }

    const itemIds = filteredItems.map((item) => item.dishId);
    const menuItems = await Menu.find({ _id: { $in: itemIds } });

    if (menuItems.length !== filteredItems.length) {
      return res.status(400).json({ message: "–î–µ—è–∫—ñ —Å—Ç—Ä–∞–≤–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    let newTotal = 0;
    const updatedItems = filteredItems.map((item) => {
      const dish = menuItems.find((d) => d._id.toString() === item.dishId);
      const quantity = item.quantity || 1;
      newTotal += dish.price * quantity;
      return {
        dishId: dish._id,
        dishName: dish.dishName,
        price: dish.price,
        quantity,
        isFreeSale: dish.isFreeSale,
      };
    });

    const student = await User.findById(studentId);
    if (!student) {
      return res.status(404).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    const refund = order.total;
    const newBalance = student.balance + refund - newTotal;

    if (newBalance < -200) {
      return res
        .status(400)
        .json({ message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
    }

    student.balance = newBalance;
    await student.save();

    order.items = updatedItems;
    order.total = newTotal;
    await order.save();

    res.json(order);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å (–∫—É—Ä–∞—Ç–æ—Ä)
export const getAllOrders = async (req, res) => {
  try {
    const orders = await Order.find().populate(
      "studentId",
      "firstName lastName"
    );
    res.json(orders);
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–Ω—è (—É—á–µ–Ω—å)
export const getStudentOrders = async (req, res) => {
  try {
    const orders = await Order.find({ studentId: req.user.id });
    res.json(orders);
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–Ω—è (—É—á–µ–Ω—å) –∑–∞ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É
export const getTodayStudentOrders = async (req, res) => {
  try {
    const studentId = req.user.id;

    const todayStart = new Date();
    todayStart.setHours(0, 0, 0, 0);

    const todayEnd = new Date();
    todayEnd.setHours(23, 59, 59, 999);

    const orders = await Order.find({
      studentId,
      createdAt: { $gte: todayStart, $lte: todayEnd },
    });

    res.json(orders);
  } catch (error) {
    console.error(error);
    res
      .status(500)
      .json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ" });
  }
};
